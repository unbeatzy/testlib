import asyncio
import logging
import os
import sqlite3
import uuid
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton
from yoomoney import Client, Quickpay
from constants import ADMIN_ID, API_TOKEN, DB_NAME, WEBAPP_HOST, WEBAPP_PORT, WEBHOOK_PATH, WEBHOOK_URL, YOOMONEY_TOKEN, YOOMONEY_WALLET



API_TOKEN = os.getenv('API_TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID')
YOOMONEY_TOKEN = os.getenv('YOOMONEY_TOKEN')
YOOMONEY_WALLET = os.getenv('YOOMONEY_WALLET')


bot = Bot(token=API_TOKEN)
client = Client(YOOMONEY_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('vpn_bot.db')
cursor = conn.cursor()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class AddKeysState(StatesGroup):
    waiting_for_keys = State()
    waiting_for_duration = State()


class BroadcastState(StatesGroup):
    waiting_for_message = State()


class PaymentState(StatesGroup):
    waiting_for_payment_method = State()
    waiting_for_payment_card = State()
    waiting_for_screenshot = State()


async def kb_builder(buttons: list[str]):
    res = []
    for button in buttons:
        res.append([KeyboardButton(text=button)])
    return ReplyKeyboardMarkup(keyboard=res, resize_keyboard=True)


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    cursor.execute('''INSERT OR IGNORE INTO users (id, username, first_name, last_name)
                      VALUES (?, ?, ?, ?)''', (user_id, username, first_name, last_name))
    conn.commit()

    buttons = [
        [KeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å"), KeyboardButton(text="‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton(text="üòª –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥")],
        [KeyboardButton(text="üóí –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\nbeatVPN - –¥–æ—Å—Ç—É–ø–Ω—ã–π VPN —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—Å–µ—Ö!\n\n‚ùóÔ∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @beatVPN_news\n–¢–∞–º —Ç—ã —Å–º–æ–∂–µ—à—å –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π, –∞ —Ç–∞–∫–∂–µ –Ω–∞–π–¥–µ—à—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é‚ùóÔ∏è\n\nbeatVPN —ç—Ç–æ:\nü§ê —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º;\nüöÄ –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å;\nü•≥ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–∞–π—Ç–∞–º;\nüí∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –ø–æ —Ä—ã–Ω–∫—É.\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 150 —Ä—É–±–ª–µ–π / 30 –¥–Ω–µ–π –Ω–∞ –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n\n‚ùóÔ∏è –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ ‚ùóÔ∏è\n\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ.",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: types.Message, state: FSMContext):
    await state.clear()
    await send_welcome(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
@dp.message(F.text == "üí∞ –ö—É–ø–∏—Ç—å")
async def buy(message: types.Message):
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    buttons = [
        [KeyboardButton(text="1 –º–µ—Å. (150 —Ä—É–±.)"), KeyboardButton(text="3 –º–µ—Å. (300 —Ä—É–±.)")],
        [KeyboardButton(text="6 –º–µ—Å. (600 —Ä—É–±.)"), KeyboardButton(text="12 –º–µ—Å. (1200 —Ä—É–±.)")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    await message.answer("üïò –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
@dp.message(F.text.in_({"1 –º–µ—Å. (150 —Ä—É–±.)", "3 –º–µ—Å. (300 —Ä—É–±.)", "6 –º–µ—Å. (600 —Ä—É–±.)", "12 –º–µ—Å. (1200 —Ä—É–±.)"}))
async def choose_payment_method(message: types.Message, state: FSMContext):
    duration_mapping = {
        "1 –º–µ—Å. (150 —Ä—É–±.)": (1, 2),
        "3 –º–µ—Å. (300 —Ä—É–±.)": (3, 300),
        "6 –º–µ—Å. (600 —Ä—É–±.)": (6, 600),
        "12 –º–µ—Å. (1200 —Ä—É–±.)": (12, 1200)
    }
    duration, amount = duration_mapping[message.text]
    await state.update_data(duration=duration, amount=amount)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    buttons = ["üí∏ –° –∫–∞—Ä—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—É", "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {duration} –º–µ—Å. –°—Ç–æ–∏–º–æ—Å—Ç—å: {amount} —Ä—É–±.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                         reply_markup=await kb_builder(buttons))
    await state.set_state(PaymentState.waiting_for_payment_method)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üí∏ –° –∫–∞—Ä—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—É"
@dp.message(F.text == "üí∏ –° –∫–∞—Ä—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—É", PaymentState.waiting_for_payment_method)
async def confirm_payment(message: types.Message, state: FSMContext):
    buttons = ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
    await state.set_state(PaymentState.waiting_for_screenshot)
    await message.answer(
        "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n> –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –°–ë–ü: \n> –ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: \n> –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: \n\n\n‚ùóÔ∏è–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Å—É–º–º–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.‚ùóÔ∏è",
        reply_markup=await kb_builder(buttons), parse_mode="Markdown")


@dp.message(PaymentState.waiting_for_screenshot, F.photo)
async def handle_screenshot(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    duration = data.get('duration')

    await bot.send_photo(ADMIN_ID, message.photo[-1].file_id,
                         caption=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂? –°—Ä–æ–∫: {duration} –º–µ—Å.",
                         reply_markup=await admin_keyboard(user_id, duration))

    await state.clear()
    await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–ª–∞—Ç–µ–∂.", reply_markup=await main_menu())


@dp.message(PaymentState.waiting_for_screenshot)
async def handle_invalid_content(message: types.Message):
    await message.answer(
        "üñº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≥–¥–µ –≤–∏–¥–Ω–æ —Å—É–º–º—É –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞.")


async def admin_keyboard(user_id, duration):
    confirm_button = InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂",
                                          callback_data=f"confirm_payment_{user_id}_{duration}")
    reject_button = InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"reject_payment_{user_id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[confirm_button], [reject_button]])
    return keyboard


@dp.callback_query((F.data.startswith('confirm_payment_')) | (F.data.startswith('reject_payment_')))
async def process_callback_admin(callback_query: types.CallbackQuery):
    data = callback_query.data.split('_')
    user_id = int(data[2])

    if 'confirm_payment' in callback_query.data:
        duration = int(data[3])
        cursor.execute('SELECT key FROM vpn_keys WHERE is_used = 0 AND duration = ? LIMIT 1', (duration,))
        key = cursor.fetchone()
        if key:
            cursor.execute('UPDATE vpn_keys SET is_used = 1 WHERE key = ?', (key[0],))
            conn.commit()

            instruction_button = InlineKeyboardButton(text="üóí –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é", callback_data="instruction")

            keyboard = InlineKeyboardMarkup(inline_keyboard=[[instruction_button]])
            await bot.send_message(
                user_id,
                f"ü•≥ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n–í–æ—Ç –≤–∞—à –∫–ª—é—á –Ω–∞ {duration} –º–µ—Å. üîë: \n\n<code>{key[0]}</code>\n\n\n‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ, –∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é, –∫–æ—Ç–æ—Ä–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è",
                parse_mode="html",
                reply_markup=keyboard
            )
        else:
            await bot.send_message(user_id,
                                   "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª—é—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏.")
    elif 'reject_payment' in callback_query.data:
        await bot.send_message(user_id,
                               "‚ùå –ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –ø–ª–∞—Ç–µ–∂. ‚ùå\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n1. –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è;\n2. –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã;\n3. –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞.\n\n–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –ø–æ–º–æ—â—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –≤—ã–±–æ—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")

    await callback_query.answer()


@dp.callback_query(F.data == 'instruction')
async def send_instruction(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "‚úèÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ: https://telegra.ph/Nastrojka-klienta-dlya-VPN-Na-PK-iOS-i-Android-08-08",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]])
    )
    await callback_query.answer()


@dp.callback_query(F.data == 'back_to_start')
async def back_to_start(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await send_welcome(callback_query.message)


async def main_menu():
    buttons = [
        [KeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å"), KeyboardButton(text="‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton(text="üòª –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥")],
        [KeyboardButton(text="üóí –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π"
@dp.message(F.text == "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π", PaymentState.waiting_for_payment_method)
async def pay_with_card(message: types.Message, state: FSMContext):
    data = await state.get_data()
    duration = data['duration']
    amount = data['amount']

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
    payment_label = str(uuid.uuid4())

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Yoomoney API
    quickpay = Quickpay(
        receiver=YOOMONEY_WALLET,
        quickpay_form="shop",
        targets="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ VPN",
        paymentType="AC",  # 'AC' –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å –∫–∞—Ä—Ç—ã
        sum=amount,
        label=payment_label  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–µ—Ç–∫–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    )
    payment_url = quickpay.redirected_url

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_url}\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à –ø–ª–∞—Ç–µ–∂.",
        reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))

    # –û–∂–∏–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
    if await check_payment(payment_label):

        # –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª, –≤—ã–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
        cursor.execute('SELECT key FROM vpn_keys WHERE is_used = 0 AND duration = ? LIMIT 1', (duration,))
        key = cursor.fetchone()
        if key:

            cursor.execute('UPDATE vpn_keys SET is_used = 1 WHERE key = ?', (key[0],))
            conn.commit()

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É issued_keys
            cursor.execute('INSERT INTO issued_keys (user_id, payment_label, key, issued) VALUES (?, ?, ?, ?)',
                           (message.from_user.id, payment_label, key[0], True))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–æ–º –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üóí –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é")]], resize_keyboard=True)
            await message.answer(
                f"<b>–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.</b>\n–í–æ—Ç –≤–∞—à –∫–ª—é—á –Ω–∞ {duration} –º–µ—Å.: <code>{key[0]}</code>\n\n<b>‚ùóÔ∏è–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ‚ùóÔ∏è</b>\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.",
                parse_mode='HTML',
                reply_markup=keyboard
            )
        else:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                                 reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))
    else:
        await message.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                             reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True))
    await state.clear()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
async def check_payment(payment_label):
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞ —Å –º–µ—Ç–∫–æ–π: {payment_label}")

    for attempt in range(60):  # 60 –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ 60")

        try:
            history = client.operation_history(label=payment_label)
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç API: {history}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
            await asyncio.sleep(10)
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        for operation in history.operations:
            logger.debug(f"–û–ø–µ—Ä–∞—Ü–∏—è: {operation}, –°—Ç–∞—Ç—É—Å: {operation.status}")
            if operation.status == "success":
                logger.info(f"–ü–ª–∞—Ç–µ–∂ —Å –º–µ—Ç–∫–æ–π {payment_label} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
                return True

        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∂–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        logger.info(f"–ü–ª–∞—Ç–µ–∂ —Å –º–µ—Ç–∫–æ–π {payment_label} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∂–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
        await asyncio.sleep(10)

    logger.warning(f"–ü–ª–∞—Ç–µ–∂ —Å –º–µ—Ç–∫–æ–π {payment_label} –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –ø–æ–ø—ã—Ç–æ–∫.")
    return False


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üóí –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é"
@dp.callback_query(F.data == 'instruction')
async def send_instruction(callback_query: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    await bot.send_message(
        callback_query.from_user.id,
        "‚úèÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ: https://telegra.ph/Nastrojka-klienta-dlya-VPN-Na-PK-iOS-i-Android-08-08",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]])
    )
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
@dp.callback_query(F.data == 'back_to_start')
async def back_to_start(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await send_welcome(callback_query.message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.message(F.text == "‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT username, first_name, last_name, subscription_end_date FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()
    if user:
        username, first_name, last_name, subscription_end_date = user
        if subscription_end_date:
            subscription_end_date = f"–¥–æ {subscription_end_date}"
            days_left = (datetime.strptime(subscription_end_date, "%Y-%m-%d") - datetime.now()).days
        else:
            subscription_end_date = "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
            days_left = "–ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ"
        message_text = (
            f"–ò–º—è: {first_name} {last_name}\n"
            f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"
            f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_end_date}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}"
        )
    else:
        message_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    await message.answer(message_text, reply_markup=await main_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    support_link = "https://t.me/unbeatzy"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Å—ã–ª–∫—É
    await message.answer(f"–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: {support_link}", reply_markup=await main_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üòª –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥"
@dp.message(F.text == "üòª –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥")
async def trial_period(message: types.Message):
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    button_bot = InlineKeyboardButton(text="ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞", url="https://t.me/beatvpn_test_sub_bot")
    button_back = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_bot], [button_back]])

    await message.answer(
        "–î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, –¥–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ü–∏—è: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ —Ç—Ä–∏ –¥–Ω—è.\n–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –≤—ã–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–µ—Å—Ç–æ–≤—ã–º –ø–µ—Ä–∏–æ–¥–æ–º –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞ –∏ —Å–ª–µ–¥—É–π—Ç–µ –µ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n–ë–æ—Ç –≤—ã—à–ª–µ—Ç –≤–∞–º –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å 3 –¥–Ω—è —Å –º–æ–º–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n\n\n\n<b>–ï—Å–ª–∏ –≤—ã —É–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–µ—Ä–∏–æ–¥–æ–º - –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–ª—é—á –Ω–µ –≤—ã–¥–∞–µ—Ç—Å—è.</b>",
        reply_markup=keyboard,
        parse_mode="html"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
@dp.callback_query(F.data == "back_to_start")
async def back_to_start(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await send_welcome(callback_query.message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üóí –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é"
@dp.message(F.text == "üóí –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é")
async def buy(message: types.Message):
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)
    await message.answer(
        "‚úèÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ: https://telegra.ph/Nastrojka-klienta-dlya-VPN-Na-PK-iOS-i-Android-08-08",
        reply_markup=keyboard)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message(Command('add_keys'))
async def add_keys(message: types.Message, state: FSMContext):
    if str(message.from_user.id) == ADMIN_ID:
        await message.answer("üïò –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–µ–π (–≤ –º–µ—Å—è—Ü–∞—Ö):")
        await state.set_state(AddKeysState.waiting_for_duration)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. ‚ùå")


# –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–µ–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(AddKeysState.waiting_for_duration, F.text)
async def process_duration(message: types.Message, state: FSMContext):
    duration = int(message.text)
    await state.update_data(duration=duration)
    await state.set_state(AddKeysState.waiting_for_keys)
    await message.answer("üîë –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:")


# –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@dp.message(AddKeysState.waiting_for_keys, F.text)
async def process_keys(message: types.Message, state: FSMContext):
    keys = message.text.splitlines()
    data = await state.get_data()
    duration = data.get('duration')
    for key in keys:
        cursor.execute('INSERT INTO vpn_keys (key, duration, is_used) VALUES (?, ?, ?)', (key, duration, False))
    conn.commit()
    await state.clear()
    await message.answer("–ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã! ‚úÖ")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message(Command('broadcast'))
async def broadcast(message: types.Message, state: FSMContext):
    if str(message.from_user.id) == ADMIN_ID:
        await message.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        await state.set_state(BroadcastState.waiting_for_message)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. ‚ùå")


# –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(BroadcastState.waiting_for_message, F.text)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    broadcast_message = message.text
    cursor.execute('SELECT id FROM users')
    users = cursor.fetchall()
    for user in users:
        try:
            await bot.send_message(user[0], broadcast_message)
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
    await state.clear()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. ‚úÖ")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message(Command('view_active_keys'))
async def view_active_keys(message: types.Message):
    if str(message.from_user.id) == ADMIN_ID:
        cursor.execute('SELECT key, duration FROM vpn_keys WHERE is_used = 0')
        active_keys = cursor.fetchall()

        if active_keys:
            response = "üîë –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π:\n\n"
            for key, duration in active_keys:
                response += f"–ö–ª—é—á: {key}\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {duration} –º–µ—Å.\n\n"
        else:
            response = "üòî –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π."

        await message.answer(response)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. ‚ùå")


async def start():
    await dp.start_polling(bot, skip_updates=True)


if __name__ == '__main__':
    asyncio.run(start())